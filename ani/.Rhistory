mutate(cazy_base = sub("_.*$", "", cazy)) %>%
left_join(., fam_db, by = 'cazy_base') %>%
filter(cazy != 'N') %>%
group_by(genome, cazy_base) %>%
mutate(n_genes = as.numeric(length(unique(gene))))
## bigscape PCA
shorten_genus_species <- function(x){
spl = strsplit(x, split = " ")
paste0(strsplit(spl[[1]][1], split = "")[[1]][1], '. ', spl[[1]][2])
}
metadata <- read_csv('../Figures/bigscape/metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc)) %>%
group_by(genus_species) %>%
mutate(pca_label = ifelse(is.na(Agriculture),
yes = shorten_genus_species(genus_species),
no = genus_species)) %>%
ungroup()
b_pca <- bigscape %>% spread(key = Genome, value = total) %>% data.frame(.)
rownames(b_pca) <- b_pca$Type
b_pca$Type <- NULL
b_pca[is.na(b_pca)] <- 0
pca_data <- prcomp(b_pca)
pca_rot <- data.frame(pca_data$rotation,
acc = rownames(pca_data$rotation)
) %>%
left_join(., metadata, by = 'acc') %>%
mutate(Agriculture = ifelse(is.na(Agriculture),
yes = 'Generalist',
no = Agriculture)) %>%
rename('Agriculture' = Agriculture)
colours <- c("Generalist" = "#808080",
"Coral" = "#CE3DD0",
"Higher" = "#2D71F6",
"Lower" = "#FFFEAB",
"Leafcutter" = "#377D22")
geom_text_data <- pca_rot %>%
filter(genus != 'Escovopsis')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture, colour = 'black'), stroke = 2) +
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12.pdf')
setwd("~/Google Drive/Posters/2019 Raper Symposium/annotation")
source('~/scripts/theme_kirsten.R')
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
bigscape <- read_csv('bigscape.csv')
munge_gca <- function(x){
paste(strsplit(x, split = "_")[[1]][c(1,2)], collapse = "_")
}
card_files <- list.files('card', full.names = TRUE)
card <- lapply(card_files, function(x){
read_tsv(x) %>%
rename('Resistance_Mechanism' = `Resistance Mechanism`) %>%
select(ORF_ID, Resistance_Mechanism) %>%
group_by(Resistance_Mechanism) %>%
summarize(n_genes = length(unique(ORF_ID))) %>%
mutate(genome = ifelse(grepl('GCA', x), yes = munge_gca(basename(x)),
no = sub("\\..*$", "", basename(x))))
}) %>% bind_rows()
cazy_files <- list.files('cazy', full.names = TRUE)
c <- cazy_files[1]
cazy <- lapply(cazy_files, function(c){
read_tsv(c) %>%
summarize(NumCazy = length(unique(`Gene ID`)))  %>%
mutate(genome = sub(".txt", "", basename(c)))
}) %>% bind_rows() %>% as.data.frame()
metadata <- read_csv('../Figures/bigscape/metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc))
cazy$genome <- factor(cazy$genome, levels = rev(metadata$acc_red))
## cazy
cazy %>% ggplot(., aes(y = NumCazy, x = genome)) +
geom_col() +
theme_kirsten(rot = 90) + coord_flip() +
ggsave('cazy.pdf')
rownames(cazy) <- cazy$genome
cazy[metadata$acc_red, 'NumCazy', drop = FALSE]
## bigscape heatmap
big_mat <- bigscape %>% spread(Type, total) %>% as.data.frame()
rownames(big_mat) <- big_mat$Genome
big_mat$Genome <- NULL
big_mat <- as.matrix(big_mat)
colors <- brewer.pal(4, 'Purples')
pheatmap(big_mat[metadata$acc,],
cluster_rows = FALSE,
cluster_cols = FALSE,
cellwidth = 20,
cellheight = 20,
color = colors, filename = 'big_heat.pdf')
card_mat <- card %>% filter(n_genes >= 10) %>%
spread(Resistance_Mechanism, n_genes) %>% as.data.frame()
rownames(card_mat) <- card_mat$genome
card_mat$genome <- NULL
card_mat <- as.matrix(card_mat)
#colors <- brewer.pal(11, 'Blues')
colors <- colorRampPalette(brewer.pal(n = 7, name ="Blues"))(11)
card %>% filter(n_genes >= 10) %>% .$n_genes %>% summary()
breaks <- seq(min(card$n_genes), max(card$n_genes), by = 30)
pheatmap(card_mat[metadata$acc,],
breaks = breaks,
cluster_rows = FALSE,
cluster_cols = FALSE,
cellwidth = 20,
cellheight = 20,
color = colors, filename = 'card_heat.pdf')
head(card)
head(bigscape)
head(cazy)
fam_db <- read_tsv('CAZyDB.07312018.fam-activities.txt', comment = '#', col_names = c('cazy_base', 'cazy_description'))
cazy <- lapply(cazy_files, function(c){
read_tsv(c) %>%
mutate(genome = sub(".txt", "", basename(c)))
}) %>% bind_rows() %>%
separate(HMMER, into = c('hmmer', 'startstop'), sep = "\\(", remove = FALSE) %>%
separate(startstop, into = c('start', 'stop'), sep = '-') %>%
mutate(stop = sub("\\)", "", stop)) %>%
mutate(HMMER = gsub('\\([0-9-]+\\)', "", HMMER)) %>%
select(-hmmer) %>%
rename(gene = `Gene ID`) %>%
gather(tool, cazy_id, -gene, -start, -stop, -`#ofTools`, -genome) %>%
group_by(gene) %>%
mutate(cazy_ids = paste(unique(cazy_id), collapse = ",")) %>%
select(-tool, -cazy_id, -`#ofTools`) %>%
unnest(cazy_id = strsplit(cazy_ids, ",")) %>%
unnest(cazy = strsplit(cazy_id, "\\+")) %>%
select(gene, start, stop, genome, cazy) %>%
distinct() %>%
mutate(cazy_base = sub("_.*$", "", cazy)) %>%
left_join(., fam_db, by = 'cazy_base') %>%
filter(cazy != 'N') %>%
group_by(genome, cazy_base) %>%
mutate(n_genes = as.numeric(length(unique(gene))))
## bigscape PCA
shorten_genus_species <- function(x){
spl = strsplit(x, split = " ")
paste0(strsplit(spl[[1]][1], split = "")[[1]][1], '. ', spl[[1]][2])
}
metadata <- read_csv('../Figures/bigscape/metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc)) %>%
group_by(genus_species) %>%
mutate(pca_label = ifelse(is.na(Agriculture),
yes = shorten_genus_species(genus_species),
no = genus_species)) %>%
ungroup()
b_pca <- bigscape %>% spread(key = Genome, value = total) %>% data.frame(.)
rownames(b_pca) <- b_pca$Type
b_pca$Type <- NULL
b_pca[is.na(b_pca)] <- 0
pca_data <- prcomp(b_pca)
pca_rot <- data.frame(pca_data$rotation,
acc = rownames(pca_data$rotation)
) %>%
left_join(., metadata, by = 'acc') %>%
mutate(Agriculture = ifelse(is.na(Agriculture),
yes = 'Generalist',
no = Agriculture)) %>%
rename('Agriculture' = Agriculture)
colours <- c("Generalist" = "#808080",
"Coral" = "#CE3DD0",
"Higher" = "#2D71F6",
"Lower" = "#FFFEAB",
"Leafcutter" = "#377D22")
geom_text_data <- pca_rot %>%
filter(genus != 'Escovopsis')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture, colour = 'black'), stroke = 2) +
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 2, colour = 'black') +
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 1, colour = 'black') +
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
#geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC3, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_colour_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_13.pdf')
## PCA without trichodermat
keep_accessions <- metadata %>% filter(genus != "Trichoderma") %>% .$acc %>% unique()
b_pca <- bigscape %>% filter(Genome %in% keep_accessions) %>%
spread(key = Genome, value = total) %>% data.frame(.)
rownames(b_pca) <- b_pca$Type
b_pca$Type <- NULL
b_pca[is.na(b_pca)] <- 0
pca_data <- prcomp(b_pca)
pca_rot <- data.frame(pca_data$rotation,
acc = rownames(pca_data$rotation)
) %>%
left_join(., metadata, by = 'acc') %>%
mutate(Agriculture = ifelse(is.na(Agriculture),
yes = 'Generalist',
no = Agriculture)) %>%
rename('Agriculture' = Agriculture)
geom_text_data <- pca_rot %>%
filter(genus != 'Escovopsis')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_colour_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12_notrich.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC3, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_colour_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_13_notrich.pdf')
ggplot(data = pca_rot, aes(x = PC2, y = PC3, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_colour_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_23_notrich.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC2, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_12_notrich.pdf')
ggplot(data = pca_rot, aes(x = PC1, y = PC3, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_13_notrich.pdf')
ggplot(data = pca_rot, aes(x = PC2, y = PC3, label = pca_label)) +
geom_point(shape = 21, size = 3, aes(fill = Agriculture), stroke = 0.5, colour = 'black') +
theme_classic() +
geom_text(data = geom_text_data, hjust = 1, vjust = 0, size = 3) +
scale_fill_manual(values = colours) +
scale_x_continuous(expand = c(0, 0.2)) +
ggsave('bigscape_pca_23_notrich.pdf')
setwd("~/Google Drive/Posters/2019 Raper Symposium/Figures/ani")
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 7, height = 10, units = 'in')
library(tidyverse)
library(pheatmap)
source('~/scripts/theme_kirsten.R')
ani <- read_tsv('ani.txt', col_names = c('r', 'q', 'ani', 'rl', 'ql'), col_types = 'ccnnn') %>%
mutate(r = basename(r)) %>%
mutate(q = basename(q))
# ani <- read_tsv('~/Desktop/fastani_out.txt', col_names = c('r', 'q', 'ani', 'rl', 'ql'), col_types = 'ccnnn') %>%
#      mutate(r = sub('.all.maker.transcripts.fasta', '', basename(r))) %>%
#      mutate(q = sub('.all.maker.transcripts.fasta', '', basename(q)))
metadata <- read_csv('metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc))
unique_genomes <- rev(metadata$genome_id)
me_me <- lapply(unique_genomes, function(x){
c(x, x)
})
#genome_metadata <- read_tsv('qc/genome_metadata.txt')
combinations <- c(combn(x = unique_genomes, 2, simplify = FALSE), me_me)
ani_df <- lapply(combinations, function(t){
t_matches <- c(paste0(t[1], "_", t[2]), paste0(t[2], "_", t[1]))
ani %>% mutate(match_id = paste0(r, "_", q)) %>%
filter(match_id %in% t_matches) %>%
mutate(ave_ani = mean(ani)) %>%
mutate(genome1 = t[1]) %>%
mutate(genome2 = t[2]) %>%
select(ave_ani, genome1, genome2) %>%
distinct()
}) %>%
bind_rows() %>%
group_by(genome1) %>%
mutate(g1 = metadata[which(metadata$genome_id == genome1), 'genus_species', drop = TRUE]) %>%
group_by(genome2) %>%
mutate(g2 = metadata[which(metadata$genome_id == genome2), 'genus_species', drop = TRUE]) %>%
ungroup() %>%
filter(g1 != g2)  %>%
mutate(ave_ani_sig = signif(x = ave_ani, digits = 2))
ani_df$g1 <- factor(ani_df$g1, levels = rev(metadata$genus_species))
ani_df$g2 <- factor(ani_df$g2, levels = rev(metadata$genus_species))
ani_df_high <- ani_df %>% filter(ave_ani >= 95)
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 7, height = 10, units = 'in')
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
#geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 7, height = 10, units = 'in')
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
#geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 7, height = 10, units = 'in')
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
#geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 8, height = 10, units = 'in')
shorten_genus_species <- function(x){
spl = strsplit(x, split = " ")
paste0(strsplit(spl[[1]][1], split = "")[[1]][1], '. ', spl[[1]][2])
}
metadata <- read_csv('metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc)) %>%
group_by(genus_species) %>%
mutate(pca_label = ifelse(is.na(Agriculture),
yes = shorten_genus_species(genus_species),
no = genus_species)) %>%
ungroup()
metadata <- read_csv('metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc)) %>%
group_by(genus_species) %>%
mutate(label = ifelse(is.na(Agriculture),
yes = shorten_genus_species(genus_species),
no = genus_species)) %>%
ungroup()
unique_genomes <- rev(metadata$genome_id)
me_me <- lapply(unique_genomes, function(x){
c(x, x)
})
combinations <- c(combn(x = unique_genomes, 2, simplify = FALSE), me_me)
ani_df <- lapply(combinations, function(t){
t_matches <- c(paste0(t[1], "_", t[2]), paste0(t[2], "_", t[1]))
ani %>% mutate(match_id = paste0(r, "_", q)) %>%
filter(match_id %in% t_matches) %>%
mutate(ave_ani = mean(ani)) %>%
mutate(genome1 = t[1]) %>%
mutate(genome2 = t[2]) %>%
select(ave_ani, genome1, genome2) %>%
distinct()
}) %>%
bind_rows() %>%
group_by(genome1) %>%
mutate(g1 = metadata[which(metadata$genome_id == genome1), 'genus_species', drop = TRUE]) %>%
group_by(genome2) %>%
mutate(g2 = metadata[which(metadata$genome_id == genome2), 'genus_species', drop = TRUE]) %>%
ungroup() %>%
filter(g1 != g2)  %>%
mutate(ave_ani_sig = signif(x = ave_ani, digits = 2))
ani_df$g1 <- factor(ani_df$g1, levels = rev(metadata$label))
ani_df$g2 <- factor(ani_df$g2, levels = rev(metadata$label))
ani_df_high <- ani_df %>% filter(ave_ani >= 95)
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
#geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 8, height = 10, units = 'in')
metadata$label
ani_df <- lapply(combinations, function(t){
t_matches <- c(paste0(t[1], "_", t[2]), paste0(t[2], "_", t[1]))
ani %>% mutate(match_id = paste0(r, "_", q)) %>%
filter(match_id %in% t_matches) %>%
mutate(ave_ani = mean(ani)) %>%
mutate(genome1 = t[1]) %>%
mutate(genome2 = t[2]) %>%
select(ave_ani, genome1, genome2) %>%
distinct()
}) %>%
bind_rows() %>%
group_by(genome1) %>%
mutate(g1 = metadata[which(metadata$genome_id == genome1), 'label', drop = TRUE]) %>%
group_by(genome2) %>%
mutate(g2 = metadata[which(metadata$genome_id == genome2), 'label', drop = TRUE]) %>%
ungroup() %>%
filter(g1 != g2)  %>%
mutate(ave_ani_sig = signif(x = ave_ani, digits = 2))
ani_df$g1 <- factor(ani_df$g1, levels = rev(metadata$label))
ani_df$g2 <- factor(ani_df$g2, levels = rev(metadata$label))
ani_df_high <- ani_df %>% filter(ave_ani >= 95)
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
#geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 8, height = 10, units = 'in')
library(tidyverse)
library(pheatmap)
source('~/scripts/theme_kirsten.R')
ani <- read_tsv('ani.txt', col_names = c('r', 'q', 'ani', 'rl', 'ql'), col_types = 'ccnnn') %>%
mutate(r = basename(r)) %>%
mutate(q = basename(q))
# ani <- read_tsv('~/Desktop/fastani_out.txt', col_names = c('r', 'q', 'ani', 'rl', 'ql'), col_types = 'ccnnn') %>%
#      mutate(r = sub('.all.maker.transcripts.fasta', '', basename(r))) %>%
#      mutate(q = sub('.all.maker.transcripts.fasta', '', basename(q)))
shorten_genus_species <- function(x){
spl = strsplit(x, split = " ")
paste0(strsplit(spl[[1]][1], split = "")[[1]][1], '. ', spl[[1]][2])
}
metadata <- read_csv('metadata.csv') %>%
mutate(acc_red = sub("\\..*$", "", acc)) %>%
group_by(genus_species) %>%
mutate(label = ifelse(is.na(Agriculture),
yes = shorten_genus_species(genus_species),
no = genus_species)) %>%
ungroup()
unique_genomes <- rev(metadata$genome_id)
me_me <- lapply(unique_genomes, function(x){
c(x, x)
})
#genome_metadata <- read_tsv('qc/genome_metadata.txt')
combinations <- c(combn(x = unique_genomes, 2, simplify = FALSE), me_me)
ani_df <- lapply(combinations, function(t){
t_matches <- c(paste0(t[1], "_", t[2]), paste0(t[2], "_", t[1]))
ani %>% mutate(match_id = paste0(r, "_", q)) %>%
filter(match_id %in% t_matches) %>%
mutate(ave_ani = mean(ani)) %>%
mutate(genome1 = t[1]) %>%
mutate(genome2 = t[2]) %>%
select(ave_ani, genome1, genome2) %>%
distinct()
}) %>%
bind_rows() %>%
group_by(genome1) %>%
mutate(g1 = metadata[which(metadata$genome_id == genome1), 'label', drop = TRUE]) %>%
group_by(genome2) %>%
mutate(g2 = metadata[which(metadata$genome_id == genome2), 'label', drop = TRUE]) %>%
ungroup() %>%
filter(g1 != g2)  %>%
mutate(ave_ani_sig = signif(x = ave_ani, digits = 2))
ani_df$g1 <- factor(ani_df$g1, levels = rev(metadata$label))
ani_df$g2 <- factor(ani_df$g2, levels = rev(metadata$label))
ani_df_high <- ani_df %>% filter(ave_ani >= 95)
ggplot(ani_df, aes(x = g1, y = g2, fill = ave_ani)) +
geom_tile() +
geom_tile(data = ani_df_high, colour = 'yellow', size = 0.9) +
#geom_text(data = ani_df_high, aes(label = ave_ani_sig)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsave('ani_tile.pdf', dpi = 320, width = 8, height = 10, units = 'in')
## clades and members with high identity
## 1
## ICBG742, NIGB, LGSR, NQYS
##2
## NQYR, NIGC, NQYQ
## 3
## 1096, 733, 751
## ragoo the genomes of anything that is >99% identical
filter(ani_df, ave_ani_sig >= 98)
#aln_lens <- read_tsv('qc/ANIvis.tsv')
#seq_lens <- read_tsv('qc/fasta_lengths.txt', col_names = c('Reference', 'Reference_Length'))
#all_len <- left_join(aln_lens, seq_lens, by = 'Reference')
## look for things that align over a large length of sequence
#all_len %>% mutate(perc_aligned = (QueryAligned/Reference_Length)*100) %>%
#  filter(perc_aligned > 70)
ani_df_high
ani_df_high %>% filter(g1 == 'ICBG1054')
ani_df_high$g1
View(ani_df_high)
ani_df %>% filter(g1 == 'ICBG1054')
ani_df %>% filter(g1 == 'ICBG1054', g2 == 'ICBG726')
ani_df %>% filter(g2 == 'ICBG1054', g1 == 'ICBG726')
ani_df %>% filter(g2 == 'ICBG751', g1 == 'ICBG733')
ani_df %>% filter(g2 == 'ICBG1065', g1 == 'ICBG1075')
ani_df %>% filter(g2 == 'ICBG2049', g1 == 'ICBG2047')
ani_df %>% filter(g2 == 'ICBG736', g1 == 'ICBG731')
ani_df %>% filter(g1 == 'ICBG736', g2 == 'ICBG731')
ani_df %>% filter(g1 == 'ICBG2049', g2 == 'ICBG736')
ani_df %>% filter(g2 == 'ICBG2049', g1 == 'ICBG736')
